# Based on https://github.com/pachkovsky/discourse-docker

# Additional MIME types that you'd like nginx to handle go in here
types {
    text/csv csv;
}

proxy_cache_path /var/nginx/cache keys_zone=one:10m max_size=200m;

# attempt to preserve the proto, must be in http context
map $http_x_forwarded_proto $thescheme {
  default $scheme;
  https https;
}

log_format log_discourse '[$time_local] $remote_addr "$request" "$http_user_agent" "$sent_http_x_discourse_route" $status $bytes_sent "$http_referer" $upstream_response_time $request_time "$sent_http_x_discourse_username"';

server {

  access_log /var/log/nginx/access.log log_discourse;

  listen 80 default_server;
  gzip on;
  gzip_vary on;
  gzip_min_length 1000;
  gzip_comp_level 5;
  gzip_types application/json text/css application/x-javascript application/javascript;

  server_tokens off;

  sendfile on;

  keepalive_timeout 65;

  # maximum file upload size (keep up to date when changing the corresponding site setting)
  client_max_body_size 10m;

  # path to discourse's public directory
  set $public /srv/discourse/public;

  # Prevent Internet Explorer 10 "compatibility mode", which breaks Discourse.
  # If other subdomains under your domain are supposed to use Internet Explorer Compatibility mode,
  # it may be used for this one too, unless you explicitly tell IE not to use it.  Alternatively,
  # some people have reported having compatibility mode "stuck" on for some reason.
  # (This will also prevent compatibility mode in IE 8 and 9, but those browsers aren't supported anyway.
  add_header X-UA-Compatible "IE=edge";

  # without weak etags we get zero benefit from etags on dynamically compressed content
  # further more etags are based on the file in nginx not sha of data
  # use dates, it solves the problem fine even cross server
  etag off;

  # prevent direct download of backups
  location ^~ /backups/ {
    internal;
  }

  root $public;
  passenger_enabled on;
  passenger_user www-data;
  passenger_ruby /usr/bin/ruby;
  passenger_app_env production;
  add_header ETag "";

  location ~* assets/.*\.(eot|ttf|woff|woff2|ico)$ {
    expires 1y;
    add_header Cache-Control public;
    add_header Access-Control-Allow-Origin *;
   }

  location = /srv/status {
    access_log off;
    log_not_found off;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $thescheme;

    break;
  }

  location ~ ^/assets/ {
    expires 1y;
    # asset pipeline enables this
    gzip_static on;
    add_header Cache-Control public;
    # TODO I don't think this break is needed, it just breaks out of rewrite
    break;
  }

  location ~ ^/plugins/ {
    expires 1y;
    add_header Cache-Control public;
  }

  # cache emojis
  location ~ /_?emoji.*\.(png|gif|jpg|jpeg)$/ {
    expires 1y;
    add_header Cache-Control public;
  }

  location ~ ^/uploads/ {

    # NOTE: it is really annoying that we can't just define headers
    # at the top level and inherit.
    #
    # proxy_set_header DOES NOT inherit, by design, we must repeat it,
    # otherwise headers are not set correctly
#
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $thescheme;
    proxy_set_header X-Sendfile-Type X-Accel-Redirect;
    proxy_set_header X-Accel-Mapping $public/=/downloads/;
    expires 1y;
    add_header Cache-Control public;

    ## optional upload anti-hotlinking rules
    #valid_referers none blocked mysite.com *.mysite.com;
    #if ($invalid_referer) { return 403; }

    # custom CSS
    location ~ /stylesheet-cache/ {
        try_files $uri =404;
    }
    # this allows us to bypass rails
    location ~* \.(gif|png|jpg|jpeg|bmp|tif|tiff)$ {
        try_files $uri =404;
    }
    # thumbnails & optimized images
    location ~ /_?optimized/ {
        try_files $uri =404;
    }


    break;
  }

  location ~ ^/admin/backups/ {
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $thescheme;
    proxy_set_header X-Sendfile-Type X-Accel-Redirect;
    proxy_set_header X-Accel-Mapping $public/=/downloads/;

    break;
  }

  # This big block is needed so we can selectively enable
  # acceleration for backups and avatars
  # see note about repetition above
  location ~ ^/(letter_avatar|user_avatar|highlight-js|stylesheets|favicon/proxied) {
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $thescheme;

    # if Set-Cookie is in the response nothing gets cached
    # this is double bad cause we are not passing last modified in
    proxy_ignore_headers "Set-Cookie";
    proxy_hide_header "Set-Cookie";

    # note x-accel-redirect can not be used with proxy_cache
    proxy_cache one;
    proxy_cache_valid 200 301 302 7d;
    proxy_cache_valid any 1m;

    break;
  }

  try_files $uri @discourse;

  location /downloads/ {
    internal;
    alias $public/;
  }

  location @discourse {
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $thescheme;
    break;
  }

  proxy_set_header Host $http_host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $thescheme;
}
